# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Autocountour
                                 A QGIS plugin
 For In-SAR product
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-01-26
        git sha              : $Format:%H$
        copyright            : (C) 2025 by VHSM LLC
        email                : seo@vhsm.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsRasterLayer, QgsRasterBandStats, QgsVectorLayer, QgsMessageLog, Qgis, QgsApplication

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .autocountour_dialog import AutocountourDialog#, MyOpenGLWidget
import os, tempfile, shutil
from osgeo import gdal, ogr, osr
import numpy as np


class Autocountour:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.raster_path = None
        self.raster_temp_dir = None
        self.shp_path = None
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Autocountour_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Autocountour')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Autocountour', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/autocountour/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Launch autodetecting'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Autocountour'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        if self.first_start:
            self.first_start = False
            self.dlg = AutocountourDialog()
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥
        self.dlg.show()
        self.dlg.horizontalSlider_2.valueChanged.connect(self.on_horizontalSlider_2)
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ü–∏–∫–ª –ø–æ–¥—ñ–π –¥—ñ–∞–ª–æ–≥—É
        result = self.dlg.exec_()
        # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ OK
        if result:
            self.on_ok_button_clicked()


    def on_horizontalSlider_2(self):
        self.on_ok_button_clicked()
        #MyOpenGLWidget().load_raster(raster)
        #MyOpenGLWidget().paintGL()

    def on_ok_button_clicked(self):
        self.raster_creation()
        self.shp_path = self.vector_creation()

        if not os.path.exists(self.shp_path) or os.stat(self.shp_path).st_size == 0:
            raise RuntimeError(f"–§–∞–π–ª {shp_path} –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π!")

        dataset = gdal.Open(self.raster_path)  
        band = dataset.GetRasterBand(1)   

        drv = ogr.GetDriverByName("ESRI Shapefile")
        vector_ds = drv.Open(self.shp_path, 1)  # ‚úÖ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —É —Ä–µ–∂–∏–º—ñ –∑–∞–ø–∏—Å—É (1)

        if vector_ds is None:
            raise RuntimeError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ Shapefile: {self.shp_path}")

        vector_layer = vector_ds.GetLayer()
        if vector_layer is None:
            raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–∞—Ä –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª—É!")

        print("–ó–∞–ø—É—Å–∫–∞—î–º–æ Polygonize...")
        gdal.Polygonize(band, None, vector_layer, -1, [], callback=None) #change 0 to -1 if dont work

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ä–∞—Å—Ç—Ä–æ–≤–∏–π –¥–∞—Ç–∞—Å–µ—Ç
        dataset = None

        # üî• –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –ø–æ–ª—ñ–≥–æ–Ω–∞
        max_area = 0
        max_fid = None

        for feature in vector_layer:
            geom = feature.GetGeometryRef()
            if geom and geom.GetArea() > max_area:
                max_area = geom.GetArea()
                max_fid = feature.GetFID()

        if max_fid is not None:
            print(f"–í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π –ø–æ–ª—ñ–≥–æ–Ω –∑ FID {max_fid}")
            vector_layer.DeleteFeature(max_fid)
            vector_ds.FlushCache()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç
        vector_ds = None  

        # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —à–∞—Ä —É QGIS
        vector_qgis_layer = QgsVectorLayer(self.shp_path, "Vectorized", "ogr")
        QgsProject.instance().addMapLayer(vector_qgis_layer)

        print("–ì–æ—Ç–æ–≤–æ! –ù–∞–π–±—ñ–ª—å—à–∏–π –ø–æ–ª—ñ–≥–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ, –∞ —à–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞—Ä—Ç–∏.")

    def  raster_creation(self):
        if self.raster_temp_dir is not None:
            if os.path.exists(raster_temp_dir):
                shutil.rmtree(raster_temp_dir)  # –í–∏–¥–∞–ª—è—î –ø–∞–ø–∫—É —Ä–∞–∑–æ–º –∑ —É—Å—ñ–º–∞ —Ñ–∞–π–ª–∞–º–∏
                print(f"–¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞: {raster_temp_dir}")
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–∞—Å—Ç—Ä–∞
        raster = self.dlg.mMapLayerComboBox.currentLayer()
        threshold = self.dlg.horizontalSlider_2.value()/10
        raster_url = raster.dataProvider().dataSourceUri()
        extent = raster.extent()
        ds = gdal.Open(raster_url)
        wkt = ds.GetProjection()
        raster_array = np.array(ds.GetRasterBand(1).ReadAsArray())
        width, height = raster.width(), raster.height()
        mean = np.mean(raster_array)  # –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
        std_dev = np.std(raster_array)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è

        msg = (f"Mean: {mean},"
            f"StdDev: {std_dev},"
            f"Threshold: {threshold}")
        QgsMessageLog.logMessage(msg, "Raster Stats", level=Qgis.Info)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∫–∏: –∑–Ω–∞—á–µ–Ω–Ω—è > 1 —Å—Ç–∞—é—Ç—å 1, —ñ–Ω—à—ñ ‚Äî 0
        mask_array = np.where( abs((raster_array - mean) / std_dev) > threshold, 1, 0)

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Ç—Ä—É
        raster_temp_dir = tempfile.mkdtemp()
        temp_tif = tempfile.NamedTemporaryFile(dir=raster_temp_dir,suffix=".tif", delete=False)
        self.raster_path = temp_tif.name
        temp_tif.close()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ, —â–æ–± GDAL –º—ñ–≥ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ GDAL –¥–∞—Ç–∞—Å–µ—Ç
        driver = gdal.GetDriverByName('GTiff')
        dataset = driver.Create(self.raster_path, width, height, 1, gdal.GDT_Float32)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–µ–æ–ø—Ä–∏–≤‚Äô—è–∑–∫—É
        dataset.SetGeoTransform([
            extent.xMinimum(),
            (extent.xMaximum() - extent.xMinimum()) / width, 0,
            extent.yMaximum(), 0,
            (extent.yMinimum() - extent.yMaximum()) / height
        ])

        dataset.SetProjection(wkt)

        # –ó–∞–ø–∏—Å—É—î–º–æ –º–∞—Å–∏–≤ —É —Ä–∞—Å—Ç—Ä
        band = dataset.GetRasterBand(1)
        band.WriteArray(mask_array)

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥–∞—Ç–∞—Å–µ—Ç
        dataset.FlushCache()
        dataset = None

        print(f"–¢–∏–º—á–∞—Å–æ–≤–∏–π —Ä–∞—Å—Ç—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ: {self.raster_path}")
        # –î–æ–¥–∞—î–º–æ —Ä–∞—Å—Ç—Ä —É QGIS
        raster_layer = QgsRasterLayer(self.raster_path, "Temporary Raster", "gdal")
        QgsProject.instance().addMapLayer(raster_layer)

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –ø–∞–ø–∫–∏ –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è QGIS
        def remove_temp_file():
            if os.path.exists(raster_temp_dir):
                shutil.rmtree(raster_temp_dir)  # –í–∏–¥–∞–ª—è—î –ø–∞–ø–∫—É —Ä–∞–∑–æ–º –∑ —É—Å—ñ–º–∞ —Ñ–∞–π–ª–∞–º–∏
                print(f"–¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞: {raster_temp_dir}")

        # –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ QGIS
        QgsApplication.instance().aboutToQuit.connect(remove_temp_file)
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if isinstance(layer, QgsRasterLayer) and layer.source() == self.raster_path:
                QgsProject.instance().removeMapLayer(layer)
        return self.raster_path

    def  vector_creation(self):
        raster = self.dlg.mMapLayerComboBox.currentLayer()
        raster_url = raster.dataProvider().dataSourceUri()
        ds = gdal.Open(raster_url)
        wkt = ds.GetProjection()
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É
        temp_dir = tempfile.mkdtemp()
        shp_path = os.path.join(temp_dir, "temp_vectorized.shp")  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è Shapefile
        drv = ogr.GetDriverByName("ESRI Shapefile")
        if drv is None:
            raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥—Ä–∞–π–≤–µ—Ä 'ESRI Shapefile'!")

        # –°—Ç–≤–æ—Ä—é—î–º–æ DataSource
        vector_ds = drv.CreateDataSource(shp_path)
        if vector_ds is None:
            raise RuntimeError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ DataSource: {shp_path}")

        print(f"–¢–∏–º—á–∞—Å–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä–Ω–∏–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ: {shp_path}")

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        srs = osr.SpatialReference()
        srs.ImportFromWkt(wkt)

        # –°—Ç–≤–æ—Ä—é—î–º–æ —à–∞—Ä
        vector_layer = vector_ds.CreateLayer("polygons", srs, ogr.wkbPolygon)
        if vector_layer is None:
            raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω–∏–π —à–∞—Ä!")

        print("–®–∞—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –ø–∞–ø–∫–∏ –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è QGIS
        def remove_temp_file():
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)  # –í–∏–¥–∞–ª—è—î –ø–∞–ø–∫—É —Ä–∞–∑–æ–º –∑ —É—Å—ñ–º–∞ —Ñ–∞–π–ª–∞–º–∏
                print(f"–¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞: {temp_dir}")

        # –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ QGIS
        QgsApplication.instance().aboutToQuit.connect(remove_temp_file)
        vector_ds = None  # –ó–∞–∫—Ä–∏–≤–∞—î —Ñ–∞–π–ª —Ç–∞ –∑–∞–ø–∏—Å—É—î –≤—Å—ñ –∑–º—ñ–Ω–∏

        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if isinstance(layer, QgsVectorLayer) and layer.source() == self.shp_path:
                QgsProject.instance().removeMapLayer(layer)
        self.shp_path=shp_path
        return self.shp_path
