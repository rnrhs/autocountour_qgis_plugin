# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AutocountourDialog
                                 A QGIS plugin
 For In-SAR product
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-01-26
        git sha              : $Format:%H$
        copyright            : (C) 2025 by VHSM LLC
        email                : seo@vhsm.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtWidgets
from qgis.core import QgsMapLayerProxyModel
#from OpenGL.GL import *
from osgeo import gdal
import numpy as np

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'autocountour_dialog_base.ui'))


class AutocountourDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(AutocountourDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Фільтруємо лише растрові шари
        self.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)

        self.radioButton.clicked.connect(self.on_radioButton)
        self.radioButton_2.clicked.connect(self.on_radioButton_2)

    def on_radioButton(self):
        self.horizontalSlider_2.setValue(30)
    def on_radioButton_2(self):
        self.horizontalSlider_2.setValue(20)
"""
class MyOpenGLWidget(QtWidgets.QOpenGLWidget):

    def load_raster(self, raster_path):
        # Завантажуємо растр за допомогою GDAL
        dataset = gdal.Open(raster_path)
        if not dataset:
            print("Не вдалося відкрити растр.")
            return

        # Отримуємо дані пікселів
        band = dataset.GetRasterBand(1)
        raster_data = band.ReadAsArray()
        height, width = raster_data.shape

        # Перетворюємо дані на формат, що підтримується OpenGL
        raster_data = np.flipud(raster_data)  # flipud для коректного відображення
        raster_data = np.array(raster_data, dtype=np.uint8)  # конвертуємо в uint8

        # Створюємо текстуру OpenGL
        self.texture_id = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, self.texture_id)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_LUMINANCE, width, height, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, raster_data)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)

    def paintGL(self):
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        if self.texture_id:
            glEnable(GL_TEXTURE_2D)
            glBindTexture(GL_TEXTURE_2D, self.texture_id)

            # Відображаємо текстуру на квадрата
            glBegin(GL_QUADS)
            glTexCoord2f(0, 1); glVertex2f(-1, -1)
            glTexCoord2f(1, 1); glVertex2f(1, -1)
            glTexCoord2f(1, 0); glVertex2f(1, 1)
            glTexCoord2f(0, 0); glVertex2f(-1, 1)
            glEnd()

            glDisable(GL_TEXTURE_2D)"""